use rust_on_vercel_template::{
    ApiError, AuthResponse, Claims, CreateUserRequest, LoginRequest, Product, User,
};
use std::fs;
use ts_rs::TS;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Create the types directory if it doesn't exist
    fs::create_dir_all("types")?;

    // Generate TypeScript definitions for all types
    let product_ts = Product::decl();
    let user_ts = User::decl();
    let create_user_request_ts = CreateUserRequest::decl();
    let login_request_ts = LoginRequest::decl();
    let auth_response_ts = AuthResponse::decl();
    let api_error_ts = ApiError::decl();
    let claims_ts = Claims::decl();

    let combined_ts = format!(
        "// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.\n\nexport {}\n\nexport {}\n\nexport {}\n\nexport {}\n\nexport {}\n\nexport {}\n\nexport {}",
        product_ts,
        user_ts,
        create_user_request_ts,
        login_request_ts,
        auth_response_ts,
        api_error_ts,
        claims_ts,
    );

    // Write the combined definitions to the file
    fs::write("types/models.ts", combined_ts)?;

    println!("TypeScript definitions generated successfully!");
    Ok(())
}
